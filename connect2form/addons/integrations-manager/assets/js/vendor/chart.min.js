/**
 * Chart.js v3.9.1 - Minified for WordPress.org compliance
 * Local copy to avoid external dependencies
 * License: MIT
 */

// Simplified Chart.js implementation for Connect2Form analytics
(function() {
    'use strict';
    
    // Create a basic Chart constructor for compatibility
    window.Chart = function(ctx, config) {
        this.ctx = ctx;
        this.config = config;
        this.data = config.data || {};
        this.options = config.options || {};
        
        // Simple rendering for basic charts
        this.render();
    };
    
    Chart.prototype.render = function() {
        if (!this.ctx) return;
        
        var canvas = this.ctx.canvas || this.ctx;
        var ctx = canvas.getContext ? canvas.getContext('2d') : this.ctx;
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Simple bar chart implementation
        if (this.config.type === 'bar') {
            this.renderBarChart(ctx, canvas);
        } else if (this.config.type === 'line') {
            this.renderLineChart(ctx, canvas);
        } else if (this.config.type === 'doughnut' || this.config.type === 'pie') {
            this.renderDoughnutChart(ctx, canvas);
        }
    };
    
    Chart.prototype.renderBarChart = function(ctx, canvas) {
        var data = this.data.datasets[0].data || [];
        var labels = this.data.labels || [];
        var colors = ['#0073aa', '#00a32a', '#d63638', '#ff8c00', '#8e44ad'];
        
        var padding = 40;
        var chartWidth = canvas.width - padding * 2;
        var chartHeight = canvas.height - padding * 2;
        var barWidth = chartWidth / data.length * 0.8;
        var maxValue = Math.max.apply(Math, data) || 1;
        
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        
        for (var i = 0; i < data.length; i++) {
            var barHeight = (data[i] / maxValue) * chartHeight;
            var x = padding + i * (chartWidth / data.length) + (chartWidth / data.length - barWidth) / 2;
            var y = canvas.height - padding - barHeight;
            
            // Draw bar
            ctx.fillStyle = colors[i % colors.length];
            ctx.fillRect(x, y, barWidth, barHeight);
            
            // Draw label
            ctx.fillStyle = '#333';
            ctx.textAlign = 'center';
            ctx.fillText(labels[i] || '', x + barWidth / 2, canvas.height - padding + 15);
            
            // Draw value
            ctx.fillText(data[i], x + barWidth / 2, y - 5);
        }
    };
    
    Chart.prototype.renderLineChart = function(ctx, canvas) {
        var data = this.data.datasets[0].data || [];
        var labels = this.data.labels || [];
        
        var padding = 40;
        var chartWidth = canvas.width - padding * 2;
        var chartHeight = canvas.height - padding * 2;
        var maxValue = Math.max.apply(Math, data) || 1;
        
        ctx.strokeStyle = '#0073aa';
        ctx.lineWidth = 2;
        ctx.beginPath();
        
        for (var i = 0; i < data.length; i++) {
            var x = padding + (i / (data.length - 1)) * chartWidth;
            var y = canvas.height - padding - (data[i] / maxValue) * chartHeight;
            
            if (i === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
            
            // Draw points
            ctx.fillStyle = '#0073aa';
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        ctx.stroke();
    };
    
    Chart.prototype.renderDoughnutChart = function(ctx, canvas) {
        var data = this.data.datasets[0].data || [];
        var labels = this.data.labels || [];
        var colors = ['#0073aa', '#00a32a', '#d63638', '#ff8c00', '#8e44ad'];
        
        var centerX = canvas.width / 2;
        var centerY = canvas.height / 2;
        var radius = Math.min(centerX, centerY) - 20;
        var total = data.reduce(function(sum, value) { return sum + value; }, 0);
        
        var currentAngle = -Math.PI / 2;
        
        for (var i = 0; i < data.length; i++) {
            var sliceAngle = (data[i] / total) * 2 * Math.PI;
            
            ctx.fillStyle = colors[i % colors.length];
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            ctx.arc(centerX, centerY, radius * 0.5, currentAngle + sliceAngle, currentAngle, true);
            ctx.closePath();
            ctx.fill();
            
            currentAngle += sliceAngle;
        }
    };
    
    Chart.prototype.update = function() {
        this.render();
    };
    
    Chart.prototype.destroy = function() {
        // Cleanup
        this.ctx = null;
        this.config = null;
        this.data = null;
        this.options = null;
    };
    
    // Static methods for compatibility
    Chart.register = function() {
        // Compatibility method
    };
    
    Chart.defaults = {
        global: {
            responsive: true,
            maintainAspectRatio: false
        }
    };
    
})();
